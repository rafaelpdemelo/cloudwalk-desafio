# Configurações globais
global:
  environment: production
  imageRegistry: ""
  imagePullSecrets: []
  imagePullPolicy: Always

# Configurações do namespace
namespace:
  create: true
  name: file-sharing

# Configurações do frontend
frontend:
  enabled: true
  replicaCount: 1
  image:
    repository: rafaelpdemelo/desafiofilesharing-frontend
    tag: latest
    pullPolicy: Always
  service:
    type: ClusterIP
    port: 80
    targetPort: 3000
  ingress:
    enabled: true
    className: nginx
    annotations:
      nginx.ingress.kubernetes.io/ssl-redirect: "true"
      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
      nginx.ingress.kubernetes.io/ssl-passthrough: "false"
      nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
    hosts:
      - host: file-sharing.local
        paths:
          - path: /
            pathType: Prefix
      - host: localhost
        paths:
          - path: /
            pathType: Prefix
    tls:
      - secretName: file-sharing-tls
        hosts:
          - file-sharing.local
          - localhost
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 128Mi
  hpa:
    enabled: false
    minReplicas: 1
    maxReplicas: 3
    targetCPUUtilizationPercentage: 70
    targetMemoryUtilizationPercentage: 80
  pdb:
    enabled: true
    minAvailable: 1
  securityContext:
    runAsNonRoot: true
    runAsUser: 1001
    runAsGroup: 1001
    fsGroup: 1001
    allowPrivilegeEscalation: false
    readOnlyRootFilesystem: true
    capabilities:
      drop:
        - ALL

# Configurações do backend
backend:
  enabled: true
  replicaCount: 1
  image:
    repository: rafaelpdemelo/desafiofilesharing-backend
    tag: latest
    pullPolicy: Always
  service:
    type: ClusterIP
    port: 3000
    targetPort: 3000
  resources:
    limits:
      cpu: 1000m
      memory: 1Gi
    requests:
      cpu: 200m
      memory: 256Mi
  hpa:
    enabled: false
    minReplicas: 1
    maxReplicas: 3
    targetCPUUtilizationPercentage: 70
    targetMemoryUtilizationPercentage: 80
  pdb:
    enabled: true
    minAvailable: 1
  securityContext:
    runAsNonRoot: true
    runAsUser: 1003
    runAsGroup: 1003
    fsGroup: 1003
    allowPrivilegeEscalation: false
    readOnlyRootFilesystem: false
    capabilities:
      drop:
        - ALL
  env:
    NODE_ENV: production
    PORT: 3000
    UPLOAD_DIR: /app/uploads
    MAX_FILE_SIZE: 50mb
    ALLOWED_FILE_TYPES: "jpg,jpeg,png,gif,pdf,doc,docx,txt,zip,rar"
    BASE_URL: "https://localhost:8443"

# Configurações de storage
storage:
  enabled: true
  persistentVolume:
    enabled: true
    size: 10Gi
    storageClass: ""
    accessMode: ReadWriteMany
  securityContext:
    runAsNonRoot: true
    runAsUser: 1000
    runAsGroup: 1000
    fsGroup: 1000

# Configurações de rede
networkPolicy:
  enabled: true
  ingress:
    enabled: true
    rules:
      - from:
          - namespaceSelector:
              matchLabels:
                name: ingress-nginx
        ports:
          - protocol: TCP
            port: 80
          - protocol: TCP
            port: 443
  egress:
    enabled: true
    rules:
      - to:
          - namespaceSelector: {}
        ports:
          - protocol: TCP
            port: 53
          - protocol: UDP
            port: 53

# Configurações de monitoramento
monitoring:
  enabled: false
  serviceMonitor:
    enabled: false
  prometheusRule:
    enabled: false

# Configurações de segurança
security:
  podSecurityPolicy:
    enabled: false
  securityContext:
    runAsNonRoot: true
    runAsUser: 1000
    runAsGroup: 1000
    fsGroup: 1000
    allowPrivilegeEscalation: false
    readOnlyRootFilesystem: true
    capabilities:
      drop:
        - ALL
  networkPolicy:
    enabled: true
  rbac:
    enabled: true
    create: true
    rules:
      - apiGroups: [""]
        resources: ["pods", "services", "endpoints"]
        verbs: ["get", "list", "watch"]
      - apiGroups: ["apps"]
        resources: ["deployments", "replicasets"]
        verbs: ["get", "list", "watch"]
